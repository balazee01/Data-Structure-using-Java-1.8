//balazee linked list Test
//implemented method-=add node,show,
//unimplemented method= remove node



package com.dataStructure.LinearTest;

import java.util.LinkedList;

public class LinkedListTest {
	
	private Node first;
	private Node last;
	private int size=0;
// static inner class for node
	private static class Node{
		
		Node next;
		int data;
		
		Node(int data)
		{
			this.data=data;
		}
	}
	// node creation factory
	static Node getNode(int data) {
		return new Node(data);
	}
	//node add method for linked list
public void addToList(Node node) {
		Node temp=last;
		last=node;
		if(temp==null) {
			first=node;
		}
		else {
			temp.next=node;
		}
		size++;	
	 }
   //node add method at perticular position in linked list
	public void addToList(Node node, int position) {
		 checkPositionIndex(position);
		 Node temp=first;
		 if(position==size) { 
			 addToList(node); 
		 }
		 else if(position==1) {
			 node.next=first.next;
			 first=node;
			 size++;
		 }
		 else {
			while(position--!=0) {
				
				if(position==1) {
					 node.next=temp.next;
					 temp.next=node;
					 size++;	
				}
				temp=temp.next;
				
			}
		 }
	 }
	 private void checkPositionIndex(int position) {
		// TODO Auto-generated method stub
		 if(position < 0 || position > size) {	
			 //System.out.println("Invalid Position:");
			throw new ArrayIndexOutOfBoundsException();
		}
	}
// show method for all nodes present in linked list
	private void displayList() {
		 Node temp=first;
		 if(temp==null)
			 System.out.println("no elemet present in list:");
		 while(temp!=null) { 
			 System.out.print(temp.data+", ");
			 temp=temp.next;
		 }
		 System.out.println();  
	 }
	@Override
	public String toString() {
		
		Node temp=first;
		StringBuilder sb=new StringBuilder();
		
		if(temp==null)
			return "[ ]";
		
		sb.append('[');
		
			while(temp!=null) {		
				sb.append(temp.data);
				if(temp!=last)
				sb.append(',').append(' ');
				temp=temp.next;
			}
		return sb.append(']').toString();
	}

	public static void main(String[] args) {
	
	}
		
}


/* Test Cases
	LinkedListTest list=new LinkedListTest();
		//LinkedListTest list1=new LinkedListTest();
		
		list.addToList(getNode(5));
		list.addToList(getNode(6));
		list.addToList(getNode(7));
		list.addToList(getNode(8));
		list.addToList(getNode(11));
		list.addToList(getNode(4));
		list.addToList(getNode(6));
		
		
		list.displayList();
		System.out.println("size of Linkedlist: "+list.size);
		
		//LinkedList<Integer> li=new LinkedList<>();
		
		//li.add(2,10);
				
		
		list.addToList(getNode(12),1);
		
		//System.out.println(list);
		list.displayList();
		System.out.println("size of Linkedlist: "+list.size);
    
    */



