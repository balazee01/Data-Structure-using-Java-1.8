//driver code perform push,pop,pesk,traverse operation

package com.data_structure.linear_test;

public class StackArray2_0 {

	static final int MAX = 5;
	int arr[] = new int[MAX];
	int top = -1;

	void push(int data) {

		if (isFull()) {
			System.out.println("Stack Overflow:");
		} else {

			arr[++top] = data;
			System.out.println(data + " pushed into stack");

		}

	}

	int pop() {

		if (isEmpty()) {

			System.out.println("stack is underflow:");
			return -1;
		} else {

			int a = arr[top--];
			return a;
		}
	}

	int peek() {

		if (isEmpty()) {
			System.out.println("stack is underflow: ");
			return -1;
		} else {
			int a = arr[top];
			return a;
		}
	}

	void traverse() {

		for (int i = top; i >= 0; i--) {

			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}

	private boolean isEmpty() {

		return top < 0;
	}

	private boolean isFull() {

		return top >= (MAX - 1);
	}

	// driver code
	public static void main(String[] args) {

		StackArray2_0 stack = new StackArray2_0();

		// System.out.println(stack.pop() +" Popped from stack");

		stack.push(10);
		stack.push(15);
		stack.push(13);
		stack.push(17);
		stack.push(20);
		stack.push(21);

		stack.traverse();

		System.out.println(stack.pop() + " Popped from stack");
		stack.traverse();

		System.out.println(stack.pop() + " Popped from stack");
		stack.traverse();

		System.out.println("Top element is: " + stack.peek());
		stack.traverse();

	}

}
